// <auto-generated />
using EntityFrameworkCore.Jet.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelOpenXmlLib;

#nullable disable

namespace ModelOpenXmlLib.Migrations
{
    [DbContext(typeof(LibDbContext))]
    [Migration("20240628193644_AddTypeKindTable")]
    partial class AddTypeKindTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ModelOpenXmlLib.FileNamespace", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("NamespaceId")
                        .HasColumnType("integer");

                    b.HasKey("FileId", "NamespaceId");

                    b.HasIndex("FileId");

                    b.HasIndex("NamespaceId");

                    b.ToTable("FileNamespaces");
                });

            modelBuilder.Entity("ModelOpenXmlLib.LibFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ModelOpenXmlLib.Namespace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Prefix")
                        .IsUnique()
                        .HasFilter("IGNORE NULL");

                    b.ToTable("Namespaces");
                });

            modelBuilder.Entity("ModelOpenXmlLib.TypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("bit");

                    b.Property<byte>("Kind")
                        .HasColumnType("byte");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NamespaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Kind");

                    b.HasIndex("Name");

                    b.HasIndex("NamespaceId");

                    b.HasIndex("NamespaceId", "Name")
                        .IsUnique();

                    b.ToTable("Types");
                });

            modelBuilder.Entity("ModelOpenXmlLib.TypeKindEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TypeKinds");
                });

            modelBuilder.Entity("ModelOpenXmlLib.FileNamespace", b =>
                {
                    b.HasOne("ModelOpenXmlLib.LibFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelOpenXmlLib.Namespace", null)
                        .WithMany("FileNamespaces")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("ModelOpenXmlLib.TypeDef", b =>
                {
                    b.HasOne("ModelOpenXmlLib.Namespace", "Namespace")
                        .WithMany("Types")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("ModelOpenXmlLib.Namespace", b =>
                {
                    b.Navigation("FileNamespaces");

                    b.Navigation("Types");
                });
#pragma warning restore 612, 618
        }
    }
}
