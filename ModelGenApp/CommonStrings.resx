<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExcludedTypeTooltip" xml:space="preserve">
    <value>Excluded type is rejected even if its namespace is included.</value>
  </data>
  <data name="IncludedTypeTooltip" xml:space="preserve">
    <value>Included type is accepted even if its namespaces is excluded.</value>
  </data>
  <data name="MeaninglessDescription" xml:space="preserve">
    <value>Meaningless description</value>
  </data>
  <data name="MissingDescription" xml:space="preserve">
    <value>Missing description</value>
  </data>
  <data name="MultiplicatedName" xml:space="preserve">
    <value>Owner namespace hase multiple types with the same name.</value>
  </data>
  <data name="Namespaces" xml:space="preserve">
    <value>Namespaces</value>
  </data>
  <data name="NoError" xml:space="preserve">
    <value>No error</value>
  </data>
  <data name="Config" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="Types" xml:space="preserve">
    <value>Types</value>
  </data>
  <data name="Properties" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="MainWindowTitle" xml:space="preserve">
    <value>Document model generator</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="TypeToScan" xml:space="preserve">
    <value>Type to scan</value>
  </data>
  <data name="FileWithDocs" xml:space="preserve">
    <value>File with docs</value>
  </data>
  <data name="Process phases_" xml:space="preserve">
    <value>Process phases:</value>
  </data>
  <data name="ShowResults" xml:space="preserve">
    <value>Show results</value>
  </data>
  <data name="SaveResults" xml:space="preserve">
    <value>Save results</value>
  </data>
  <data name="ScanSource" xml:space="preserve">
    <value>Scan source</value>
  </data>
  <data name="AddDocs" xml:space="preserve">
    <value>Add docs</value>
  </data>
  <data name="Rename" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="TypeToScanTooltip" xml:space="preserve">
    <value>This is the main type where scan begins. Its property types and item types are scanned next.</value>
  </data>
  <data name="FileWithDocsTooltip" xml:space="preserve">
    <value>This is XML file with types and properties descriptions. 
It should be prepared by an external tool.</value>
  </data>
  <data name="FileWithDocsUseTooltip" xml:space="preserve">
    <value>You can use or omit adding docs from file.</value>
  </data>
  <data name="ModelConfiguration" xml:space="preserve">
    <value>Model configuration</value>
  </data>
  <data name="OriginalName" xml:space="preserve">
    <value>Original name</value>
  </data>
  <data name="OriginalNameTooltip" xml:space="preserve">
    <value>Original name is a name read from source.</value>
  </data>
  <data name="ExcludedNamespaceTooltip" xml:space="preserve">
    <value>Excluded namespace is rejected from scanning.</value>
  </data>
  <data name="Shortcut" xml:space="preserve">
    <value>Shortcut</value>
  </data>
  <data name="ShortcutTooltip" xml:space="preserve">
    <value>Shortcut replaces its name (if shortcuts are enabled).</value>
  </data>
  <data name="TargetName" xml:space="preserve">
    <value>Target name</value>
  </data>
  <data name="TargetNameTooltip" xml:space="preserve">
    <value>Target name is a name written to output.</value>
  </data>
  <data name="TargetShortcutTooltip" xml:space="preserve">
    <value>Target shortcut replaces target name (if shortcuts are enabled).</value>
  </data>
  <data name="TargetShortcut" xml:space="preserve">
    <value>Target shortcut</value>
  </data>
  <data name="Duplicated shortcut" xml:space="preserve">
    <value>Duplicated shortcut</value>
  </data>
  <data name="Target_shortcut_error" xml:space="preserve">
    <value>Target shortcuts must be different in different target names.</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Model_configuration_saved_in_0" xml:space="preserve">
    <value>Model configuration saved in {0}</value>
  </data>
  <data name="Model_configuration_is_invalid" xml:space="preserve">
    <value>Model configuration is invalid. See marks in the table.</value>
  </data>
  <data name="OriginalNamespace" xml:space="preserve">
    <value>Original namespace</value>
  </data>
  <data name="OriginalNamespaceTooltip" xml:space="preserve">
    <value>Original namespace is a namespace read from source.</value>
  </data>
  <data name="ExcludedNamespace" xml:space="preserve">
    <value>Excluded</value>
  </data>
  <data name="IncludedType" xml:space="preserve">
    <value>Included type</value>
  </data>
  <data name="ExcludedType" xml:space="preserve">
    <value>Excluded type</value>
  </data>
  <data name="TargetNamespace" xml:space="preserve">
    <value>Target namespace</value>
  </data>
  <data name="TargetNamespaceTooltip" xml:space="preserve">
    <value>Target namespace is a namespace written to output.</value>
  </data>
  <data name="OriginalDeclarationType" xml:space="preserve">
    <value>Original declaration type</value>
  </data>
  <data name="OriginalDeclarationTypeTooltip" xml:space="preserve">
    <value>Original declaration type is a type where a property is declared. 
If not defined then a property can be declared in any type.</value>
  </data>
  <data name="ExcludedProperty" xml:space="preserve">
    <value>Excluded property</value>
  </data>
  <data name="ExcludedPropertyTooltip" xml:space="preserve">
    <value>Excluded property is rejected even if its type is accepted.</value>
  </data>
  <data name="TargetPropertyType" xml:space="preserve">
    <value>Target property type</value>
  </data>
  <data name="TargetPropertyTypeTooltip" xml:space="preserve">
    <value>Target property type is a type of property value written to output.</value>
  </data>
  <data name="ConfigPropertyName" xml:space="preserve">
    <value>Config property name</value>
  </data>
  <data name="ConfigPropertyNameTooltip" xml:space="preserve">
    <value>Config property name is declared name of the property. 
Can contain * as a wildcard.</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ResultKind" xml:space="preserve">
    <value>Result kind</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="FilterResults" xml:space="preserve">
    <value>FIlter results</value>
  </data>
  <data name="RegisteredTypes" xml:space="preserve">
    <value>Registered types</value>
  </data>
  <data name="AcceptedTypes" xml:space="preserve">
    <value>Accepted types</value>
  </data>
  <data name="RejectedTypes" xml:space="preserve">
    <value>Rejected types</value>
  </data>
  <data name="Namespace" xml:space="preserve">
    <value>Namespace</value>
  </data>
  <data name="AllTypes" xml:space="preserve">
    <value>All types</value>
  </data>
  <data name="Classes" xml:space="preserve">
    <value>Classes</value>
  </data>
  <data name="EnumTypes" xml:space="preserve">
    <value>Enum types</value>
  </data>
  <data name="Interfaces" xml:space="preserve">
    <value>Interfaces</value>
  </data>
  <data name="StructTypes" xml:space="preserve">
    <value>Struct types</value>
  </data>
  <data name="OtherTypes" xml:space="preserve">
    <value>Other types</value>
  </data>
  <data name="ValidationError" xml:space="preserve">
    <value>Validation error</value>
  </data>
  <data name="ShortcutError" xml:space="preserve">
    <value>Shortcut error</value>
  </data>
  <data name="TargetShortcutError" xml:space="preserve">
    <value>Target shortcut error</value>
  </data>
  <data name="Kind" xml:space="preserve">
    <value>Kind</value>
  </data>
  <data name="Acceptance" xml:space="preserve">
    <value>Acceptance</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Documentation" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="AcceptanceTooltip" xml:space="preserve">
    <value>Specifies whether the item was accepted or rejected at the end of the current phase.</value>
  </data>
  <data name="TypeName" xml:space="preserve">
    <value>Type name</value>
  </data>
  <data name="TypeFullName" xml:space="preserve">
    <value>Type full name</value>
  </data>
  <data name="TypeFullNameTooltip" xml:space="preserve">
    <value>Type name preceded with namespace.</value>
  </data>
  <data name="DescriptionTooltip" xml:space="preserve">
    <value>Short description.</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="Structs" xml:space="preserve">
    <value>Structs</value>
  </data>
  <data name="Enums" xml:space="preserve">
    <value>Enums</value>
  </data>
  <data name="InterfaceTypes" xml:space="preserve">
    <value>InterfaceTypes</value>
  </data>
  <data name="Others" xml:space="preserve">
    <value>Others</value>
  </data>
  <data name="ClassTypes" xml:space="preserve">
    <value>Class types</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="RefreshResults" xml:space="preserve">
    <value>Refresh results</value>
  </data>
  <data name="DeclaringType" xml:space="preserve">
    <value>Declaring type</value>
  </data>
  <data name="DeclaringTypeTooltip" xml:space="preserve">
    <value>Declaring type is a type in which the property is declared. 
It can be the current type or one of its base types.</value>
  </data>
  <data name="ValueType" xml:space="preserve">
    <value>Value type</value>
  </data>
  <data name="ValueTypeTooltip" xml:space="preserve">
    <value>Value type is declared type of property value.</value>
  </data>
  <data name="PropertyName" xml:space="preserve">
    <value>Property name</value>
  </data>
  <data name="PropertyNameTooltip" xml:space="preserve">
    <value>Property name is an original or target name of the property
(depending on processing phase).</value>
  </data>
  <data name="PropertiesTooltip" xml:space="preserve">
    <value>Properties define values assigned to the object of the class.</value>
  </data>
  <data name="EnumValName" xml:space="preserve">
    <value>Enum value name</value>
  </data>
  <data name="EnumValNameTooltip" xml:space="preserve">
    <value>Enum value name is an original or target name 
defined in the enum type (depending on processing phase).</value>
  </data>
  <data name="EnumValue" xml:space="preserve">
    <value>Enum value</value>
  </data>
  <data name="EnumValueTooltip" xml:space="preserve">
    <value>Enum value is a numeric value of the named value
defined in the enum type.</value>
  </data>
  <data name="TypeNameTooltip" xml:space="preserve">
    <value>Type name is an original or target name of the type
(depending on processing phase).</value>
  </data>
  <data name="DisplayOptions" xml:space="preserve">
    <value>Display options</value>
  </data>
  <data name="AcceptedOnly" xml:space="preserve">
    <value>AcceptedOnly</value>
  </data>
  <data name="ShowDeclaringType" xml:space="preserve">
    <value>Show declaring type</value>
  </data>
  <data name="DisplayOptions_" xml:space="preserve">
    <value>Display options:</value>
  </data>
  <data name="ShowFullTypeName" xml:space="preserve">
    <value>Show full type name</value>
  </data>
  <data name="ValidatedTypes" xml:space="preserve">
    <value>Validated types</value>
  </data>
  <data name="ValidTypes" xml:space="preserve">
    <value>Valid types</value>
  </data>
  <data name="InvalidTypes" xml:space="preserve">
    <value>Invalid types</value>
  </data>
  <data name="TypesWithDescription" xml:space="preserve">
    <value>Types with description</value>
  </data>
  <data name="TypesWithAddedDescription" xml:space="preserve">
    <value>Types with added description</value>
  </data>
  <data name="TypesWithoutDescription" xml:space="preserve">
    <value>Types without description</value>
  </data>
  <data name="TypesWithNonUniqueName" xml:space="preserve">
    <value>Types with non-unique name</value>
  </data>
  <data name="RenamedTypes" xml:space="preserve">
    <value>Renamed types</value>
  </data>
  <data name="ConvertedTypes" xml:space="preserve">
    <value>Converted types</value>
  </data>
  <data name="ProblematicTypes" xml:space="preserve">
    <value>Problematic types</value>
  </data>
  <data name="Problem" xml:space="preserve">
    <value>Problem</value>
  </data>
  <data name="RegisteredNamespaces" xml:space="preserve">
    <value>Registered namespaces</value>
  </data>
  <data name="CheckedTypes" xml:space="preserve">
    <value>Checked types</value>
  </data>
  <data name="TypesWithMeaninglessDescription" xml:space="preserve">
    <value>Types with meaningless description</value>
  </data>
  <data name="TypesWithSameName" xml:space="preserve">
    <value>Types with same name</value>
  </data>
  <data name="ShowAcceptedOnly" xml:space="preserve">
    <value>Show accepted only</value>
  </data>
  <data name="Members" xml:space="preserve">
    <value>Members</value>
  </data>
  <data name="Schema" xml:space="preserve">
    <value>Schema</value>
  </data>
  <data name="Semantics" xml:space="preserve">
    <value>Semantics</value>
  </data>
  <data name="RelatedType" xml:space="preserve">
    <value>Related type</value>
  </data>
  <data name="Relationships" xml:space="preserve">
    <value>Relationships</value>
  </data>
  <data name="EnumValues" xml:space="preserve">
    <value>Enum values</value>
  </data>
  <data name="ValidateScan" xml:space="preserve">
    <value>Validate scan</value>
  </data>
  <data name="ValidateDocs" xml:space="preserve">
    <value>Validate docs</value>
  </data>
  <data name="MissingSchema" xml:space="preserve">
    <value>Missing schema</value>
  </data>
  <data name="MissingIncludedTypeRels" xml:space="preserve">
    <value>Missing included types relationships</value>
  </data>
  <data name="MissingIncludedTypeSchema" xml:space="preserve">
    <value>Missing included types in schema</value>
  </data>
  <data name="MissingSomeIncludedTypeSchema" xml:space="preserve">
    <value>Missing some included types in schema:</value>
  </data>
  <data name="MissingSomeIncludedTypeRels" xml:space="preserve">
    <value>Missing some included types relationships:</value>
  </data>
  <data name="MissingProperties" xml:space="preserve">
    <value>Missing properties</value>
  </data>
  <data name="ValidateNames" xml:space="preserve">
    <value>Validate names</value>
  </data>
  <data name="EnumVals" xml:space="preserve">
    <value>Enum vals</value>
  </data>
  <data name="ValidateConversion" xml:space="preserve">
    <value>Validate conversion</value>
  </data>
  <data name="ConvertTypes" xml:space="preserve">
    <value>Convert types</value>
  </data>
  <data name="TargetType" xml:space="preserve">
    <value>Target type</value>
  </data>
  <data name="TargetTypeTooltip" xml:space="preserve">
    <value>Target type results from conversion phase.</value>
  </data>
  <data name="BaseType" xml:space="preserve">
    <value>Base type</value>
  </data>
  <data name="DerivedTypes" xml:space="preserve">
    <value>Derived types</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="ShowTargetNamespaces" xml:space="preserve">
    <value>Show target namespaces</value>
  </data>
  <data name="ModelCodeOutputPath" xml:space="preserve">
    <value>Model output path</value>
  </data>
  <data name="CodeGen" xml:space="preserve">
    <value>Code generation</value>
  </data>
  <data name="ValidateGeneration" xml:space="preserve">
    <value>Validate generation</value>
  </data>
</root>