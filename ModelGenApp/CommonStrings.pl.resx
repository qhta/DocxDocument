<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExcludedTypeTooltip" xml:space="preserve">
    <value>Typ wyłączony jest odrzucany, nawet gdy jego przestrzeń nazw jest włączona.</value>
  </data>
  <data name="IncludedTypeTooltip" xml:space="preserve">
    <value>Typ włączony jest akceptowany, nawet gdy jego przestrzeń nazw jest wyłączona.</value>
  </data>
  <data name="MeaninglessDescription" xml:space="preserve">
    <value>Opis bez znaczenia</value>
  </data>
  <data name="MissingDescription" xml:space="preserve">
    <value>Brak opisu</value>
  </data>
  <data name="MultiplicatedName" xml:space="preserve">
    <value>Przestrzeń nazw zawiera wiele typów o tej samej nazwie.</value>
  </data>
  <data name="Namespaces" xml:space="preserve">
    <value>Przestrzenie nazw</value>
  </data>
  <data name="NoError" xml:space="preserve">
    <value>Brak błędu</value>
  </data>
  <data name="Config" xml:space="preserve">
    <value>Konfiguracja</value>
  </data>
  <data name="Types" xml:space="preserve">
    <value>Typy</value>
  </data>
  <data name="Properties" xml:space="preserve">
    <value>Właściwości</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="MainWindowTitle" xml:space="preserve">
    <value>Generator modelu dokumentu</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Anuluj</value>
  </data>
  <data name="TypeToScan" xml:space="preserve">
    <value>Typ do skanowania</value>
  </data>
  <data name="FileWithDocs" xml:space="preserve">
    <value>Plik z dokumentacją</value>
  </data>
  <data name="Process phases_" xml:space="preserve">
    <value>Fazy procesu:</value>
  </data>
  <data name="ShowResults" xml:space="preserve">
    <value>Pokaż wyniki</value>
  </data>
  <data name="SaveResults" xml:space="preserve">
    <value>Zapisz wyniki</value>
  </data>
  <data name="ScanSource" xml:space="preserve">
    <value>Skanowanie źródła</value>
  </data>
  <data name="AddDocs" xml:space="preserve">
    <value>Dodawanie opisów</value>
  </data>
  <data name="Rename" xml:space="preserve">
    <value>Zmiana nazw</value>
  </data>
  <data name="TypeToScanTooltip" xml:space="preserve">
    <value>To jest główny typ, od którego rozpoczyna się skanowanie. Następnie skanowane są typy jego właściwości i elementów.</value>
  </data>
  <data name="FileWithDocsTooltip" xml:space="preserve">
    <value>To jest plik XML z opisami typów i właściwości. 
Powinien być przygotowany uprzednio za pomocą osobnego narzędzia.</value>
  </data>
  <data name="FileWithDocsUseTooltip" xml:space="preserve">
    <value>Możesz użyć lub pominąć dodawanie opisów z pliku.</value>
  </data>
  <data name="ModelConfiguration" xml:space="preserve">
    <value>Konfiguracja modelu</value>
  </data>
  <data name="OriginalName" xml:space="preserve">
    <value>Nazwa oryginalna</value>
  </data>
  <data name="OriginalNameTooltip" xml:space="preserve">
    <value>Nazwa oryginalna to nazwa odczytana ze źródła.</value>
  </data>
  <data name="ExcludedNamespaceTooltip" xml:space="preserve">
    <value>Wyłączona przestrzeń nazw jest odrzucana podczas skanowania.</value>
  </data>
  <data name="Shortcut" xml:space="preserve">
    <value>Skrót</value>
  </data>
  <data name="ShortcutTooltip" xml:space="preserve">
    <value>Skrót zastępuje nazwę (gdy jest to dozwolone).</value>
  </data>
  <data name="TargetName" xml:space="preserve">
    <value>Nazwa docelowa</value>
  </data>
  <data name="TargetNameTooltip" xml:space="preserve">
    <value>Nazwa docelowa to nazwa zapisywana na wyjściu.</value>
  </data>
  <data name="TargetShortcutTooltip" xml:space="preserve">
    <value>Skrót docelowy zastępuje nazwę docelową (gdy jest to dozwolone).</value>
  </data>
  <data name="TargetShortcut" xml:space="preserve">
    <value>Skrót docelowy</value>
  </data>
  <data name="Duplicated shortcut" xml:space="preserve">
    <value>Zduplikowany skrót</value>
  </data>
  <data name="Target_shortcut_error" xml:space="preserve">
    <value>Docelowe skróty nazw muszą być różne dla różnych nazw docelowych.</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Zapisz</value>
  </data>
  <data name="Model_configuration_saved_in_0" xml:space="preserve">
    <value>Konfiguracja modelu zapisana w {0}</value>
  </data>
  <data name="Model_configuration_is_invalid" xml:space="preserve">
    <value>Konfiguracja modelu jest nieprawidłowa. Zobacz znaczniki w tabeli.</value>
  </data>
  <data name="OriginalNamespace" xml:space="preserve">
    <value>Oryginalna przestrzeń nazw</value>
  </data>
  <data name="OriginalNamespaceTooltip" xml:space="preserve">
    <value>Oryginalna przestrzeń nazw to przestrzeń nazw odczytana ze źródła.</value>
  </data>
  <data name="ExcludedNamespace" xml:space="preserve">
    <value>Wyłączona</value>
  </data>
  <data name="IncludedType" xml:space="preserve">
    <value>Typ włączony</value>
  </data>
  <data name="ExcludedType" xml:space="preserve">
    <value>Typ wyłączony</value>
  </data>
  <data name="TargetNamespace" xml:space="preserve">
    <value>Docelowa przestrzeń nazw</value>
  </data>
  <data name="TargetNamespaceTooltip" xml:space="preserve">
    <value>Docelowa przestrzeń nazw to przestrzeń nazw zapisywana na wyjściu.</value>
  </data>
  <data name="OriginalDeclarationType" xml:space="preserve">
    <value>Oryginalny typ deklaracji</value>
  </data>
  <data name="OriginalDeclarationTypeTooltip" xml:space="preserve">
    <value>Oryginalny typ deklaracji to typ, w którym deklarowana jest właściwość. 
Jeśli nie jest zdefiniowany, to właściwość może być zadeklarowana w dowolnym typie.</value>
  </data>
  <data name="ExcludedProperty" xml:space="preserve">
    <value>Właściwość wyłączona</value>
  </data>
  <data name="ExcludedPropertyTooltip" xml:space="preserve">
    <value>Właściwość wyłączona jest odrzucana, nawet gdy jej typ jest zaakceptowany.</value>
  </data>
  <data name="TargetPropertyType" xml:space="preserve">
    <value>Docelowy typ właściwości</value>
  </data>
  <data name="TargetPropertyTypeTooltip" xml:space="preserve">
    <value>Docelowy typ właściwości jest typem wartości właściwości zapisywanym na wyjściu.</value>
  </data>
  <data name="ConfigPropertyName" xml:space="preserve">
    <value>Konfigurowana nazwa właściwości</value>
  </data>
  <data name="ConfigPropertyNameTooltip" xml:space="preserve">
    <value>Konfigurowana nazwa właściwości jest deklarowaną nazwą właściwości. 
Może zawierać * jako symbol wieloznaczny.</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nazwa</value>
  </data>
  <data name="ResultKind" xml:space="preserve">
    <value>Rodzaj wyniku</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>Liczba</value>
  </data>
  <data name="FilterResults" xml:space="preserve">
    <value>Filtruj wyniki</value>
  </data>
  <data name="RegisteredTypes" xml:space="preserve">
    <value>Zarejestrowane typy</value>
  </data>
  <data name="AcceptedTypes" xml:space="preserve">
    <value>Zaakceptowane typy</value>
  </data>
  <data name="RejectedTypes" xml:space="preserve">
    <value>Odrzucone typy</value>
  </data>
  <data name="Namespace" xml:space="preserve">
    <value>Przestrzeń nazw</value>
  </data>
  <data name="AllTypes" xml:space="preserve">
    <value>Wszystkie typy</value>
  </data>
  <data name="Classes" xml:space="preserve">
    <value>Klasy</value>
  </data>
  <data name="EnumTypes" xml:space="preserve">
    <value>Typy wyliczane</value>
  </data>
  <data name="Interfaces" xml:space="preserve">
    <value>Interfejsy</value>
  </data>
  <data name="StructTypes" xml:space="preserve">
    <value>Typy struktur</value>
  </data>
  <data name="OtherTypes" xml:space="preserve">
    <value>Inne typy</value>
  </data>
  <data name="ValidationError" xml:space="preserve">
    <value>Błąd walidacji</value>
  </data>
  <data name="ShortcutError" xml:space="preserve">
    <value>Błąd skrótu</value>
  </data>
  <data name="TargetShortcutError" xml:space="preserve">
    <value>Błąd skrótu docelowego</value>
  </data>
  <data name="Kind" xml:space="preserve">
    <value>Rodzaj</value>
  </data>
  <data name="Acceptance" xml:space="preserve">
    <value>Akceptacja</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Opis</value>
  </data>
  <data name="Documentation" xml:space="preserve">
    <value>Dokumentacja</value>
  </data>
  <data name="AcceptanceTooltip" xml:space="preserve">
    <value>Określa, czy element został zaakceptowany (accepted), czy odrzucony (rejected) na koniec bieżącej fazy.</value>
  </data>
  <data name="TypeName" xml:space="preserve">
    <value>Nazwa typu</value>
  </data>
  <data name="TypeFullName" xml:space="preserve">
    <value>Pełna nazwa typu</value>
  </data>
  <data name="TypeFullNameTooltip" xml:space="preserve">
    <value>Pełna nazwa typu to nazwa typu poprzedzona przestrzenią nazw.</value>
  </data>
  <data name="DescriptionTooltip" xml:space="preserve">
    <value>Krótki opis.</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>Wszystkie</value>
  </data>
  <data name="Structs" xml:space="preserve">
    <value>Struktury</value>
  </data>
  <data name="Enums" xml:space="preserve">
    <value>Wyliczane</value>
  </data>
  <data name="InterfaceTypes" xml:space="preserve">
    <value>Typy interfejsowe</value>
  </data>
  <data name="Others" xml:space="preserve">
    <value>Inne</value>
  </data>
  <data name="ClassTypes" xml:space="preserve">
    <value>Typy klas</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Odśwież</value>
  </data>
  <data name="RefreshResults" xml:space="preserve">
    <value>Odśwież wyniki</value>
  </data>
  <data name="DeclaringType" xml:space="preserve">
    <value>Typ deklarujący</value>
  </data>
  <data name="DeclaringTypeTooltip" xml:space="preserve">
    <value>Typ deklarujący to typ, w którym zadeklarowana jest właściwość.
Może to być typ bieżący lub jeden z jego typów podstawowych.</value>
  </data>
  <data name="ValueType" xml:space="preserve">
    <value>Typ wartości</value>
  </data>
  <data name="ValueTypeTooltip" xml:space="preserve">
    <value>Typ wartości jest zadeklarowanym typem wartości właściwości.</value>
  </data>
  <data name="PropertyName" xml:space="preserve">
    <value>Nazwa właściwości</value>
  </data>
  <data name="PropertyNameTooltip" xml:space="preserve">
    <value>Nazwa właściwości to oryginalna lub docelowa nazwa właściwości
(w zależności od fazy przetwarzania).</value>
  </data>
  <data name="PropertiesTooltip" xml:space="preserve">
    <value>Właściwości definiują wartości przypisane do obiektów danej klasy.</value>
  </data>
  <data name="EnumValName" xml:space="preserve">
    <value>Nazwa wartości wyliczanej</value>
  </data>
  <data name="EnumValNameTooltip" xml:space="preserve">
    <value>Nazwa wartości wyliczeniowej to nazwa oryginalna lub docelowa
zdefiniowana w typie wyliczeniowym (w zależności od fazy przetwarzania).</value>
  </data>
  <data name="EnumValue" xml:space="preserve">
    <value>Wartość wyliczana</value>
  </data>
  <data name="EnumValueTooltip" xml:space="preserve">
    <value>Wartość wyliczana to wartość liczbowa wartości nazwanej
zdefiniowanej w typie wyliczeniowym.</value>
  </data>
  <data name="TypeNameTooltip" xml:space="preserve">
    <value>Nazwa typu to oryginalna lub docelowa nazwa typu
(w zależności od fazy przetwarzania).</value>
  </data>
  <data name="DisplayOptions" xml:space="preserve">
    <value>Opcje wyświetlania</value>
  </data>
  <data name="AcceptedOnly" xml:space="preserve">
    <value>Tylko zaakceptowane</value>
  </data>
  <data name="ShowDeclaringType" xml:space="preserve">
    <value>Pokaż typ deklarujący</value>
  </data>
  <data name="DisplayOptions_" xml:space="preserve">
    <value>Opcje wyświetlania:</value>
  </data>
  <data name="ShowFullTypeName" xml:space="preserve">
    <value>Pokaż pełną nazwę typu</value>
  </data>
  <data name="ValidatedTypes" xml:space="preserve">
    <value>Walidowane typy</value>
  </data>
  <data name="ValidTypes" xml:space="preserve">
    <value>Typy poprawne</value>
  </data>
  <data name="InvalidTypes" xml:space="preserve">
    <value>Typy niepoprawne</value>
  </data>
  <data name="TypesWithDescription" xml:space="preserve">
    <value>Typy z opisem</value>
  </data>
  <data name="TypesWithAddedDescription" xml:space="preserve">
    <value>Typy z dodanym opisem</value>
  </data>
  <data name="TypesWithoutDescription" xml:space="preserve">
    <value>Typy bez opisu</value>
  </data>
  <data name="TypesWithNonUniqueName" xml:space="preserve">
    <value>Typy o nieunikalnej nazwie</value>
  </data>
  <data name="RenamedTypes" xml:space="preserve">
    <value>Typy ze zmienioną nazwą</value>
  </data>
  <data name="ConverterTypes" xml:space="preserve">
    <value>Typy przekonwertowane</value>
  </data>
  <data name="ProblematicTypes" xml:space="preserve">
    <value>Typy problematyczne</value>
  </data>
  <data name="Problem" xml:space="preserve">
    <value>Problem</value>
  </data>
  <data name="RegisteredNamespaces" xml:space="preserve">
    <value>Zarejestrowane przestrzenie nazw</value>
  </data>
  <data name="CheckedTypes" xml:space="preserve">
    <value>Sprawdzone typy</value>
  </data>
  <data name="TypesWithMeaninglessDescription" xml:space="preserve">
    <value>Typy z nic nieznaczącym opisem</value>
  </data>
  <data name="TypesWithSameName" xml:space="preserve">
    <value>Typy z tą samą nazwą</value>
  </data>
  <data name="ShowAcceptedOnly" xml:space="preserve">
    <value>Pokaż tylko zaakceptowane</value>
  </data>
</root>