namespace ModelGenApp.ViewModels;
public class PropInfoViewModel : ViewModel<PropInfo>, IAcceptable
{
  public PropInfoViewModel(PhaseResultsViewModel phase, ClassInfoViewModel? owner, PropInfo propInfo, TNS nameKindSelector) : base(propInfo)
  {
    Owner = owner;
    NameKindSelector = nameKindSelector;
    Phase = phase;
  }

  [DataGridColumn(IsAutoGenerated = false)]
  public ClassInfoViewModel? Owner { get; private set; }

  [DataGridColumn(IsAutoGenerated = false)]
  public TNS NameKindSelector { get; private set; }

  [DataGridColumn(IsAutoGenerated = false)]
  public PhaseResultsViewModel Phase { get; private set; }

  public bool IsAccepted => Model.IsAcceptedAfter(Phase.PhaseNum);

  [DataGridColumn(
    HeaderResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.Acceptance),
    HeaderTooltipResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.AcceptanceTooltip)
    )]
  public Acceptance Acceptance
  {
    get
    {
      Acceptance result = 0;
      if (Model.IsAcceptedAfter(Phase.PhaseNum))
        result |= Acceptance.accepted;
      if (Model.IsRejectedAfter(Phase.PhaseNum))
        result |= Acceptance.rejected;
      return result;
    }
  }

  public bool ShowFullTypeName
  {
    get => _ShowFullTypeName;
    set
    {
      if (_ShowFullTypeName != value)
      {
        _ShowFullTypeName = value;
        NotifyPropertyChanged(nameof(ShowFullTypeName));
        if (DeclaringType != null)
          _DeclaringType = null;
        NotifyPropertyChanged(nameof(DeclaringType));
        if (ValueType != null)
          _ValueType = null;
        NotifyPropertyChanged(nameof(ValueType));
      }
    }
  }
  private bool _ShowFullTypeName;

  [DataGridColumn(
    HeaderResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.DeclaringType),
    HeaderTooltipResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.DeclaringTypeTooltip),
    DataTemplateResourceKey = "TypeInfoLinkTemplate",
    SortMemberPath = "DeclaringType.FullName",
    ClipboardContentPath = "DeclaringType.FullName")]
  public TypeInfoViewModel? DeclaringType
  {
    get
    {
      if (_DeclaringType == null)
      {
        if (Owner?.Properties?.ShowDeclaringType == true && Model.DeclaringType != null)
          _DeclaringType = TypeInfoViewModel.Create(Phase, Model.DeclaringType, NameKindSelector);
      }
      return _DeclaringType;
    }
  }
  private TypeInfoViewModel? _DeclaringType;

  [DataGridColumn(
    HeaderResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.PropertyName),
    HeaderTooltipResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.PropertyNameTooltip)
    )]
  public string Name
  {
    get
    {
      if (NameKindSelector.Target)
        return Model.GetTargetName();
      return Model.Name;
    }
  }

  [DataGridColumn(
    HeaderResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.ValueType),
    HeaderTooltipResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.ValueTypeTooltip),
    DataTemplateResourceKey = "TypeInfoLinkTemplate",
    SortMemberPath = "ValueType.Name",
    ClipboardContentPath = "ValueType.Name")]
  public TypeInfoViewModel? ValueType
  {
    get
    {
      var propType = Model.PropertyType;
      if (propType != null && _ValueType == null)
      {
        if (propType.TypeKind == TypeKind.@enum)
          _ValueType = new EnumTypeInfoViewModel(Phase, propType, NameKindSelector);
        else
        if (propType.TypeKind == TypeKind.type)
          _ValueType = TypeInfoViewModel.Create(Phase, propType, NameKindSelector);
        else
          _ValueType = new ClassInfoViewModel(Phase, propType, NameKindSelector);
      }
      return _ValueType;
    }
  }
  private TypeInfoViewModel? _ValueType;

  [DataGridColumn(
    HeaderResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.Description),
    HeaderTooltipResourceKey = "ModelGenApp.CommonStrings." + nameof(CommonStrings.DescriptionTooltip)
    )]
  public string? Description => Model.Description;
}

