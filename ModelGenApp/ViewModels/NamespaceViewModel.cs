namespace ModelGenApp.ViewModels;
public class NamespaceViewModel: ViewModel
{
  public NamespaceViewModel(PhaseViewModel phaseViewModel, string name)
  {
    Owner = phaseViewModel;
    Name = name;
    _AllTypes = new TypeListViewModel(this, "All types");
    _Classes = new TypeListViewModel(this, "Classes");
    _Enums = new TypeListViewModel(this, "Enums");
    _Interfaces= new TypeListViewModel(this, "Interfaces");
    _Structs = new TypeListViewModel(this, "Structs");
    _Others= new TypeListViewModel(this, "Others");
  }

  [DataGridColumn(IsAutoGenerated = false)]
  public PhaseViewModel Owner { get; private set; }


  public string Name
  {
    get { return _Name; }
    set
    {
      if (_Name != value)
      {
        _Name = value;
        NotifyPropertyChanged(nameof(Name));
      }
    }
  }
  private string _Name = null!;

  [DataGridColumn(IsAutoGenerated = false)]
  public string Caption => Owner.PhaseName +" "+this.Name;

  public TypeListViewModel AllTypes
  {
    get { return _AllTypes; }
    set
    {
      if (_AllTypes != value)
      {
        _AllTypes = value;
        NotifyPropertyChanged(nameof(AllTypes));
      }
    }
  }
  private TypeListViewModel _AllTypes;


  public TypeListViewModel Classes
  {
    get { return _Classes; }
    set
    {
      if (_Classes != value)
      {
        _Classes = value;
        NotifyPropertyChanged(nameof(Classes));
      }
    }
  }
  private TypeListViewModel _Classes;


  public TypeListViewModel Enums
  {
    get { return _Enums; }
    set
    {
      if (_Enums != value)
      {
        _Enums = value;
        NotifyPropertyChanged(nameof(Enums));
      }
    }
  }
  private TypeListViewModel _Enums;


  public TypeListViewModel Interfaces
  {
    get { return _Interfaces; }
    set
    {
      if (_Interfaces != value)
      {
        _Interfaces = value;
        NotifyPropertyChanged(nameof(Interfaces));
      }
    }
  }
  private TypeListViewModel _Interfaces;


  public TypeListViewModel Structs
  {
    get { return _Structs; }
    set
    {
      if (_Structs != value)
      {
        _Structs = value;
        NotifyPropertyChanged(nameof(Structs));
      }
    }
  }
  private TypeListViewModel _Structs;


  public TypeListViewModel Others
  {
    get { return _Others; }
    set
    {
      if (_Others != value)
      {
        _Others = value;
        NotifyPropertyChanged(nameof(Others));
      }
    }
  }
  private TypeListViewModel _Others;

}
