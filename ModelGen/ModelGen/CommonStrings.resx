<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ProcessStart" xml:space="preserve">
    <value>Start processing</value>
  </data>
  <data name="ScanSource" xml:space="preserve">
    <value>Scan source</value>
  </data>
  <data name="Start_of_phase_0" xml:space="preserve">
    <value>Start of phase {0}</value>
  </data>
  <data name="End_of_phase_0" xml:space="preserve">
    <value>End of phase {0}</value>
  </data>
  <data name="time_" xml:space="preserve">
    <value>time:</value>
  </data>
  <data name="Scanned_0_Namespaces" xml:space="preserve">
    <value>Scanned {0} namespaces</value>
  </data>
  <data name="RegisteredTypes" xml:space="preserve">
    <value>Registed types</value>
  </data>
  <data name="registered_0_of_1_types_in_2_namespaces" xml:space="preserve">
    <value>registered {0} of {1} types in {2} namespaces</value>
  </data>
  <data name="in_0_namespaces" xml:space="preserve">
    <value>in {0} namespaces</value>
  </data>
  <data name="adding_docs_0_of_1_types_added_to_2_types" xml:space="preserve">
    <value>adding docs to {0} of {1} types, added to {2} types</value>
  </data>
  <data name="RenameTypes" xml:space="preserve">
    <value>Rename types</value>
  </data>
  <data name="renaming_0_of_1_types_renamed_2_types" xml:space="preserve">
    <value>renaming {0} of {1} types, renamed {2} types</value>
  </data>
  <data name="ConvertTypes" xml:space="preserve">
    <value>Convert types</value>
  </data>
  <data name="converting_0_of_1_types_converted_2_types" xml:space="preserve">
    <value>converting {0} of {1} types, converted {2} types</value>
  </data>
  <data name="AcceptedTypes" xml:space="preserve">
    <value>Accepted types</value>
  </data>
  <data name="RejectedTypes" xml:space="preserve">
    <value>Rejected types</value>
  </data>
  <data name="CheckedTypes" xml:space="preserve">
    <value>Checked types</value>
  </data>
  <data name="ValidTypes" xml:space="preserve">
    <value>Valid types</value>
  </data>
  <data name="InvalidTypes" xml:space="preserve">
    <value>InvalidTypes</value>
  </data>
  <data name="AllTypes" xml:space="preserve">
    <value>All types</value>
  </data>
  <data name="AddDocs" xml:space="preserve">
    <value>Add docs</value>
  </data>
  <data name="TypesWithDescription" xml:space="preserve">
    <value>Types with description</value>
  </data>
  <data name="TypesWithAddedDescription" xml:space="preserve">
    <value>Types with added description</value>
  </data>
  <data name="TypesWithoutDescription" xml:space="preserve">
    <value>Types without description</value>
  </data>
  <data name="TypesWithMeaninglessDescription" xml:space="preserve">
    <value>Types with meaningless description</value>
  </data>
  <data name="RenamedTypes" xml:space="preserve">
    <value>Renamed types</value>
  </data>
  <data name="TypesWithSameName" xml:space="preserve">
    <value>Types with same name</value>
  </data>
  <data name="ConvertedTypes" xml:space="preserve">
    <value>Converted types</value>
  </data>
  <data name="verifying_0_of_1_types_invalid_2_types" xml:space="preserve">
    <value>verifying {0} of {1} types, invalid {2} types</value>
  </data>
  <data name="TotalTime" xml:space="preserve">
    <value>Total time</value>
  </data>
  <data name="ProcessCancelled" xml:space="preserve">
    <value>Process cancelled</value>
  </data>
  <data name="ProcessFinished" xml:space="preserve">
    <value>Process finished</value>
  </data>
  <data name="ProcessContinue" xml:space="preserve">
    <value>Process continuation</value>
  </data>
  <data name="GenerateCode" xml:space="preserve">
    <value>Generate code</value>
  </data>
  <data name="GeneratedTypes" xml:space="preserve">
    <value>Generated types</value>
  </data>
  <data name="TargetTypesOnly" xml:space="preserve">
    <value>Target types</value>
  </data>
  <data name="TargetNamespacesOnly" xml:space="preserve">
    <value>Target namespaces</value>
  </data>
  <data name="generated_0_of_1_types_in_2_namespaces" xml:space="preserve">
    <value>generated {0} of {1} types in {2} namespaces</value>
  </data>
  <data name="FinalCheck" xml:space="preserve">
    <value>Final check</value>
  </data>
  <data name="checked_0_of_1_types" xml:space="preserve">
    <value>checked {0} of {1} types</value>
  </data>
  <data name="CompilationErrorList" xml:space="preserve">
    <value>Compilation error list</value>
  </data>
  <data name="CompilationErrors" xml:space="preserve">
    <value>Compilation errors</value>
  </data>
  <data name="CodeCompilation" xml:space="preserve">
    <value>CodeCompilation</value>
  </data>
  <data name="FixedTypes" xml:space="preserve">
    <value>Fixed types</value>
  </data>
  <data name="FixedProperties" xml:space="preserve">
    <value>Fixed properties</value>
  </data>
  <data name="RemovedProperties" xml:space="preserve">
    <value>Removed properties</value>
  </data>
  <data name="GeneratedFiles" xml:space="preserve">
    <value>Compilation files</value>
  </data>
  <data name="GeneratedFileList" xml:space="preserve">
    <value>Compilation file list</value>
  </data>
  <data name="ValidatedTypes" xml:space="preserve">
    <value>Validated types</value>
  </data>
  <data name="InvalidProperties" xml:space="preserve">
    <value>Invalid properties</value>
  </data>
  <data name="Model_configuration_not_defined" xml:space="preserve">
    <value>Model configuration is not defined.</value>
  </data>
  <data name="Scan_type_name_not_defined" xml:space="preserve">
    <value>Scan type name not defined</value>
  </data>
  <data name="Project_name_not_defined" xml:space="preserve">
    <value>Project name not defined</value>
  </data>
  <data name="Code_output_path_not_defined" xml:space="preserve">
    <value>Code output path not defined</value>
  </data>
  <data name="Generator_type_not_defined" xml:space="preserve">
    <value>Generator type not defined</value>
  </data>
  <data name="Generator_type_not_found" xml:space="preserve">
    <value>Generator type not found</value>
  </data>
  <data name="Generator_type_constructor_not_found" xml:space="preserve">
    <value>Generator type constructor not found</value>
  </data>
  <data name="Solution_name_not_defined" xml:space="preserve">
    <value>Solution name not defined</value>
  </data>
</root>